// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0
// source: v1/market.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GopherMarketClient is the client API for GopherMarket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GopherMarketClient interface {
	UsersRegister(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	UsersLogin(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	OrdersAdd(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Empty, error)
	OrdersGet(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*Empty, error)
}

type gopherMarketClient struct {
	cc grpc.ClientConnInterface
}

func NewGopherMarketClient(cc grpc.ClientConnInterface) GopherMarketClient {
	return &gopherMarketClient{cc}
}

func (c *gopherMarketClient) UsersRegister(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.GopherMarket/UsersRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopherMarketClient) UsersLogin(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.GopherMarket/UsersLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopherMarketClient) OrdersAdd(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.GopherMarket/OrdersAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gopherMarketClient) OrdersGet(ctx context.Context, in *OrdersRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.GopherMarket/OrdersGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GopherMarketServer is the server API for GopherMarket service.
// All implementations must embed UnimplementedGopherMarketServer
// for forward compatibility
type GopherMarketServer interface {
	UsersRegister(context.Context, *AuthRequest) (*Empty, error)
	UsersLogin(context.Context, *AuthRequest) (*Empty, error)
	OrdersAdd(context.Context, *OrderRequest) (*Empty, error)
	OrdersGet(context.Context, *OrdersRequest) (*Empty, error)
	mustEmbedUnimplementedGopherMarketServer()
}

// UnimplementedGopherMarketServer must be embedded to have forward compatible implementations.
type UnimplementedGopherMarketServer struct {
}

func (UnimplementedGopherMarketServer) UsersRegister(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersRegister not implemented")
}
func (UnimplementedGopherMarketServer) UsersLogin(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersLogin not implemented")
}
func (UnimplementedGopherMarketServer) OrdersAdd(context.Context, *OrderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersAdd not implemented")
}
func (UnimplementedGopherMarketServer) OrdersGet(context.Context, *OrdersRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersGet not implemented")
}
func (UnimplementedGopherMarketServer) mustEmbedUnimplementedGopherMarketServer() {}

// UnsafeGopherMarketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GopherMarketServer will
// result in compilation errors.
type UnsafeGopherMarketServer interface {
	mustEmbedUnimplementedGopherMarketServer()
}

func RegisterGopherMarketServer(s grpc.ServiceRegistrar, srv GopherMarketServer) {
	s.RegisterService(&GopherMarket_ServiceDesc, srv)
}

func _GopherMarket_UsersRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopherMarketServer).UsersRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.GopherMarket/UsersRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopherMarketServer).UsersRegister(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GopherMarket_UsersLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopherMarketServer).UsersLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.GopherMarket/UsersLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopherMarketServer).UsersLogin(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GopherMarket_OrdersAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopherMarketServer).OrdersAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.GopherMarket/OrdersAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopherMarketServer).OrdersAdd(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GopherMarket_OrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GopherMarketServer).OrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.GopherMarket/OrdersGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GopherMarketServer).OrdersGet(ctx, req.(*OrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GopherMarket_ServiceDesc is the grpc.ServiceDesc for GopherMarket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GopherMarket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopher.market.v1.GopherMarket",
	HandlerType: (*GopherMarketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UsersRegister",
			Handler:    _GopherMarket_UsersRegister_Handler,
		},
		{
			MethodName: "UsersLogin",
			Handler:    _GopherMarket_UsersLogin_Handler,
		},
		{
			MethodName: "OrdersAdd",
			Handler:    _GopherMarket_OrdersAdd_Handler,
		},
		{
			MethodName: "OrdersGet",
			Handler:    _GopherMarket_OrdersGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/market.proto",
}
