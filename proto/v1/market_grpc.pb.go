// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: v1/market.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PublicClient is the client API for Public service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PublicClient interface {
	UsersRegister(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
	UsersLogin(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error)
}

type publicClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicClient(cc grpc.ClientConnInterface) PublicClient {
	return &publicClient{cc}
}

func (c *publicClient) UsersRegister(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Public/UsersRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) UsersLogin(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Public/UsersLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServer is the server API for Public service.
// All implementations must embed UnimplementedPublicServer
// for forward compatibility
type PublicServer interface {
	UsersRegister(context.Context, *AuthRequest) (*Empty, error)
	UsersLogin(context.Context, *AuthRequest) (*Empty, error)
	mustEmbedUnimplementedPublicServer()
}

// UnimplementedPublicServer must be embedded to have forward compatible implementations.
type UnimplementedPublicServer struct {
}

func (UnimplementedPublicServer) UsersRegister(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersRegister not implemented")
}
func (UnimplementedPublicServer) UsersLogin(context.Context, *AuthRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersLogin not implemented")
}
func (UnimplementedPublicServer) mustEmbedUnimplementedPublicServer() {}

// UnsafePublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicServer will
// result in compilation errors.
type UnsafePublicServer interface {
	mustEmbedUnimplementedPublicServer()
}

func RegisterPublicServer(s grpc.ServiceRegistrar, srv PublicServer) {
	s.RegisterService(&Public_ServiceDesc, srv)
}

func _Public_UsersRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).UsersRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Public/UsersRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).UsersRegister(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_UsersLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).UsersLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Public/UsersLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).UsersLogin(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Public_ServiceDesc is the grpc.ServiceDesc for Public service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Public_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopher.market.v1.Public",
	HandlerType: (*PublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UsersRegister",
			Handler:    _Public_UsersRegister_Handler,
		},
		{
			MethodName: "UsersLogin",
			Handler:    _Public_UsersLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/market.proto",
}

// PrivateClient is the client API for Private service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivateClient interface {
	OrdersAdd(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Empty, error)
	OrdersGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrdersResponse, error)
	GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balance, error)
	BalanceWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*Empty, error)
	GetWithdrawals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WithdrawsResponse, error)
}

type privateClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivateClient(cc grpc.ClientConnInterface) PrivateClient {
	return &privateClient{cc}
}

func (c *privateClient) OrdersAdd(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Private/OrdersAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateClient) OrdersGet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*OrdersResponse, error) {
	out := new(OrdersResponse)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Private/OrdersGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateClient) GetBalance(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Private/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateClient) BalanceWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Private/BalanceWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateClient) GetWithdrawals(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WithdrawsResponse, error) {
	out := new(WithdrawsResponse)
	err := c.cc.Invoke(ctx, "/gopher.market.v1.Private/GetWithdrawals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateServer is the server API for Private service.
// All implementations must embed UnimplementedPrivateServer
// for forward compatibility
type PrivateServer interface {
	OrdersAdd(context.Context, *OrderRequest) (*Empty, error)
	OrdersGet(context.Context, *Empty) (*OrdersResponse, error)
	GetBalance(context.Context, *Empty) (*Balance, error)
	BalanceWithdraw(context.Context, *WithdrawRequest) (*Empty, error)
	GetWithdrawals(context.Context, *Empty) (*WithdrawsResponse, error)
	mustEmbedUnimplementedPrivateServer()
}

// UnimplementedPrivateServer must be embedded to have forward compatible implementations.
type UnimplementedPrivateServer struct {
}

func (UnimplementedPrivateServer) OrdersAdd(context.Context, *OrderRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersAdd not implemented")
}
func (UnimplementedPrivateServer) OrdersGet(context.Context, *Empty) (*OrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersGet not implemented")
}
func (UnimplementedPrivateServer) GetBalance(context.Context, *Empty) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPrivateServer) BalanceWithdraw(context.Context, *WithdrawRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceWithdraw not implemented")
}
func (UnimplementedPrivateServer) GetWithdrawals(context.Context, *Empty) (*WithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawals not implemented")
}
func (UnimplementedPrivateServer) mustEmbedUnimplementedPrivateServer() {}

// UnsafePrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivateServer will
// result in compilation errors.
type UnsafePrivateServer interface {
	mustEmbedUnimplementedPrivateServer()
}

func RegisterPrivateServer(s grpc.ServiceRegistrar, srv PrivateServer) {
	s.RegisterService(&Private_ServiceDesc, srv)
}

func _Private_OrdersAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServer).OrdersAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Private/OrdersAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServer).OrdersAdd(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Private_OrdersGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServer).OrdersGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Private/OrdersGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServer).OrdersGet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Private_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Private/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServer).GetBalance(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Private_BalanceWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServer).BalanceWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Private/BalanceWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServer).BalanceWithdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Private_GetWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateServer).GetWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gopher.market.v1.Private/GetWithdrawals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateServer).GetWithdrawals(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Private_ServiceDesc is the grpc.ServiceDesc for Private service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Private_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gopher.market.v1.Private",
	HandlerType: (*PrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrdersAdd",
			Handler:    _Private_OrdersAdd_Handler,
		},
		{
			MethodName: "OrdersGet",
			Handler:    _Private_OrdersGet_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Private_GetBalance_Handler,
		},
		{
			MethodName: "BalanceWithdraw",
			Handler:    _Private_BalanceWithdraw_Handler,
		},
		{
			MethodName: "GetWithdrawals",
			Handler:    _Private_GetWithdrawals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/market.proto",
}
