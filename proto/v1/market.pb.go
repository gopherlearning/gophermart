// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.0
// source: v1/market.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login    string `protobuf:"bytes,1,opt,name=Login,proto3" json:"Login,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *AuthRequest) Reset() {
	*x = AuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRequest) ProtoMessage() {}

func (x *AuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRequest.ProtoReflect.Descriptor instead.
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return file_v1_market_proto_rawDescGZIP(), []int{0}
}

func (x *AuthRequest) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *AuthRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order string `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order,omitempty"`
}

func (x *OrderRequest) Reset() {
	*x = OrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRequest) ProtoMessage() {}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRequest.ProtoReflect.Descriptor instead.
func (*OrderRequest) Descriptor() ([]byte, []int) {
	return file_v1_market_proto_rawDescGZIP(), []int{1}
}

func (x *OrderRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

type OrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*Order `protobuf:"bytes,1,rep,name=Orders,proto3" json:"Orders,omitempty"`
}

func (x *OrdersRequest) Reset() {
	*x = OrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdersRequest) ProtoMessage() {}

func (x *OrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdersRequest.ProtoReflect.Descriptor instead.
func (*OrdersRequest) Descriptor() ([]byte, []int) {
	return file_v1_market_proto_rawDescGZIP(), []int{2}
}

func (x *OrdersRequest) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     string  `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	Status     string  `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Accrual    float64 `protobuf:"fixed64,3,opt,name=Accrual,proto3" json:"Accrual,omitempty"`
	UploadedAt string  `protobuf:"bytes,4,opt,name=UploadedAt,proto3" json:"UploadedAt,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_v1_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_v1_market_proto_rawDescGZIP(), []int{3}
}

func (x *Order) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Order) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Order) GetAccrual() float64 {
	if x != nil {
		return x.Accrual
	}
	return 0
}

func (x *Order) GetUploadedAt() string {
	if x != nil {
		return x.UploadedAt
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_v1_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_v1_market_proto_rawDescGZIP(), []int{4}
}

var File_v1_market_proto protoreflect.FileDescriptor

var file_v1_market_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x10, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x3a, 0xa1, 0x01, 0x92, 0x41, 0x9d, 0x01, 0x0a, 0x6e, 0x2a, 0x0b, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0x4c, 0xd0, 0x97, 0xd0, 0xb0, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd1, 0x80, 0xd0,
	0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0,
	0xb8, 0xd1, 0x8e, 0x20, 0xd0, 0xb8, 0xd0, 0xbb, 0xd0, 0xb8, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8e, 0xd2, 0x01, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0xd2,
	0x01, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x32, 0x2b, 0x7b, 0x22, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x22, 0x3a, 0x22, 0x3c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3e, 0x22, 0x2c, 0x22,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x22, 0x3c, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x3e, 0x22, 0x7d, 0x22, 0x24, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x40, 0x0a,
	0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0xe0, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x63, 0x63,
	0x72, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x41, 0x63, 0x63, 0x72,
	0x75, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x6d, 0x92, 0x41, 0x6a, 0x32, 0x68, 0x7b, 0x22, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x3a, 0x20, 0x22, 0x39, 0x32, 0x37, 0x38, 0x39, 0x32, 0x33, 0x34, 0x37, 0x30,
	0x22, 0x2c, 0x22, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3a, 0x20, 0x22, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x22, 0x2c, 0x22, 0x61, 0x63, 0x63, 0x72, 0x75, 0x61, 0x6c,
	0x22, 0x3a, 0x20, 0x35, 0x30, 0x30, 0x2c, 0x22, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x32, 0x30, 0x32, 0x30, 0x2d, 0x31, 0x32, 0x2d, 0x31,
	0x30, 0x54, 0x31, 0x35, 0x3a, 0x31, 0x35, 0x3a, 0x34, 0x35, 0x2b, 0x30, 0x33, 0x3a, 0x30, 0x30,
	0x22, 0x7d, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa6, 0x17, 0x0a, 0x0c,
	0x47, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0xf2, 0x05, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xa8, 0x05, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22,
	0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x87, 0x05, 0x12, 0x2f, 0xd0, 0xa0, 0xd0, 0xb5,
	0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8,
	0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0x1a, 0xc5, 0x02, 0xd0, 0xa0,
	0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86,
	0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0,
	0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf,
	0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb5, 0x20, 0xd0, 0xbb, 0xd0, 0xbe,
	0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd, 0x2f, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x8c, 0x2e, 0x20, 0xd0, 0x9a, 0xd0, 0xb0, 0xd0, 0xb6, 0xd0, 0xb4, 0xd1, 0x8b, 0xd0,
	0xb9, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd, 0x20, 0xd0, 0xb4, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x82,
	0xd1, 0x8c, 0x20, 0xd1, 0x83, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xbc, 0x2e, 0x20, 0xd0, 0x9f, 0xd0, 0xbe, 0xd1, 0x81, 0xd0,
	0xbb, 0xd0, 0xb5, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd,
	0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3, 0xd0, 0xb8, 0xd1, 0x81, 0xd1,
	0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0,
	0xb8, 0xd1, 0x81, 0xd1, 0x85, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20,
	0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb8,
	0xd1, 0x87, 0xd0, 0xb5, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xb0, 0xd1,
	0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	0xd1, 0x8f, 0x2e, 0x4a, 0x73, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x6c, 0x0a, 0x6a, 0xd0, 0xbf,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82,
	0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1,
	0x88, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb3,
	0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xb0, 0xd0, 0xbd, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x80,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12,
	0x2e, 0x0a, 0x2c, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82,
	0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0x4a,
	0x25, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x1e, 0x0a, 0x1c, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3,
	0xd0, 0xb8, 0xd0, 0xbd, 0x20, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0x20, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x82, 0x4a, 0x39, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x32, 0x0a,
	0x30, 0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xbd, 0xd1, 0x8f, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xba,
	0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0,
	0xb0, 0x12, 0xfb, 0x03, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xb4, 0x03, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x96, 0x03, 0x12, 0x35, 0xd0, 0x90, 0xd1, 0x83, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f,
	0x1a, 0x5c, 0xd0, 0x90, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8,
	0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0,
	0xb8, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd0,
	0xb0, 0xd1, 0x80, 0xd0, 0xb5, 0x20, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd,
	0x2f, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0x2e, 0x4a, 0x51,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4a, 0x0a, 0x48, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1,
	0x8c, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd, 0xd0, 0xbe,
	0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1,
	0x84, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0,
	0xbd, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x2c, 0xd0, 0xbd, 0xd0, 0xb5,
	0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1, 0x84, 0xd0,
	0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf,
	0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0x4a, 0x3a, 0x0a, 0x03, 0x34, 0x30, 0x31, 0x12,
	0x33, 0x0a, 0x31, 0xd0, 0xbd, 0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd0,
	0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd0, 0xbb, 0xd0,
	0xbe, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0, 0xbd, 0x2f, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8c, 0x4a, 0x39, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x32, 0x0a, 0x30, 0xd0,
	0xb2, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1,
	0x8f, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0, 0xb1, 0xd0, 0xba, 0xd0, 0xb0,
	0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x12,
	0xba, 0x07, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xf3, 0x06, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x3a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x92, 0x41, 0xd0, 0x06, 0x12, 0x2a, 0xd0, 0x97,
	0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb7, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0,
	0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x1a, 0x83, 0x03, 0xd0, 0xa5, 0xd0, 0xb5, 0xd0,
	0xbd, 0xd0, 0xb4, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1, 0x81,
	0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x80,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xbc, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1,
	0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0, 0xbc, 0x2e, 0x20, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0,
	0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba,
	0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd1, 0x8f, 0xd0, 0xb2, 0xd0, 0xbb, 0xd1, 0x8f, 0xd0,
	0xb5, 0xd1, 0x82, 0xd1, 0x81, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xbb,
	0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb,
	0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x86, 0xd0,
	0xb8, 0xd1, 0x84, 0xd1, 0x80, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb8, 0xd0, 0xb7,
	0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xb9, 0x20, 0xd0,
	0xb4, 0xd0, 0xbb, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x8b, 0x2e, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbc,
	0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0,
	0xb0, 0x20, 0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb6, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb1, 0xd1,
	0x8b, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xba, 0xd0, 0xbe,
	0xd1, 0x80, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xbd, 0xd0, 0xbe, 0xd1, 0x81,
	0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xb2, 0xd0, 0xb2, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb0, 0x20,
	0xd1, 0x81, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xbe, 0xd1, 0x89, 0xd1, 0x8c, 0xd1,
	0x8e, 0x20, 0xd0, 0xb0, 0xd0, 0xbb, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd1, 0x82,
	0xd0, 0xbc, 0xd0, 0xb0, 0x20, 0xd0, 0x9b, 0xd1, 0x83, 0xd0, 0xbd, 0xd0, 0xb0, 0x2e, 0x4a, 0x63,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5c, 0x0a, 0x5a, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0,
	0x20, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0x20, 0xd0, 0xb1, 0xd1, 0x8b, 0xd0, 0xbb, 0x20, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0x20,
	0xd1, 0x8d, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbc, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1,
	0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0,
	0xb5, 0xd0, 0xbc, 0x4a, 0x4e, 0x0a, 0x03, 0x32, 0x30, 0x32, 0x12, 0x47, 0x0a, 0x45, 0xd0, 0xbd,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0,
	0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0,
	0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x82, 0x20, 0xd0, 0xb2,
	0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
	0xba, 0xd1, 0x83, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x2e, 0x0a, 0x2c, 0xd0, 0xbd,
	0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd1,
	0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xb7, 0xd0, 0xb0,
	0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0x4a, 0x47, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x40, 0x0a, 0x3e, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0x20, 0xd0, 0xbd,
	0xd0, 0xb5, 0x20, 0xd0, 0xb0, 0xd1, 0x83, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0,
	0xb8, 0xd1, 0x84, 0xd0, 0xb8, 0xd1, 0x86, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0,
	0xb0, 0xd0, 0xbd, 0x4a, 0x67, 0x0a, 0x03, 0x34, 0x30, 0x39, 0x12, 0x60, 0x0a, 0x5e, 0xd0, 0xbd,
	0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd1, 0x83, 0xd0, 0xb6, 0xd0, 0xb5, 0x20, 0xd0, 0xb1, 0xd1,
	0x8b, 0xd0, 0xbb, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb6,
	0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd0, 0xb4, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb3, 0xd0, 0xb8, 0xd0,
	0xbc, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2,
	0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbc, 0x12, 0xe5, 0x05, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x70,
	0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f,
	0x70, 0x68, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x9d, 0x05, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x92,
	0x41, 0x81, 0x05, 0x12, 0x54, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0,
	0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81,
	0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0,
	0xb6, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xbd, 0xd0, 0xbe,
	0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0,
	0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0x1a, 0xbf, 0x02, 0xd0, 0xa5, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd0, 0xb4, 0xd0, 0xbb, 0xd0, 0xb5, 0xd1, 0x80, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd1,
	0x81, 0xd1, 0x82, 0xd1, 0x83, 0xd0, 0xbf, 0xd0, 0xb5, 0xd0, 0xbd, 0x20, 0xd1, 0x82, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xba, 0xd0, 0xbe, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0,
	0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0,
	0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0xd1, 0x83, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd0, 0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8e,
	0x2e, 0x20, 0xd0, 0x9d, 0xd0, 0xbe, 0xd0, 0xbc, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb0, 0x20, 0xd0,
	0xb7, 0xd0, 0xb0, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb0, 0x20, 0xd0, 0xb2, 0x20, 0xd0,
	0xb2, 0xd1, 0x8b, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x87, 0xd0, 0xb5, 0x20, 0xd0, 0xb4, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd0, 0xb6, 0xd0, 0xbd, 0xd1, 0x8b, 0x20, 0xd0, 0xb1, 0xd1, 0x8b, 0xd1, 0x82, 0xd1,
	0x8c, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0xd1, 0x81, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb8,
	0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd1, 0x8b, 0x20, 0xd0, 0xbf, 0xd0,
	0xbe, 0x20, 0xd0, 0xb2, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8,
	0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xb3, 0xd1, 0x80, 0xd1, 0x83, 0xd0, 0xb7, 0xd0, 0xba, 0xd0,
	0xb8, 0x20, 0xd0, 0xbe, 0xd1, 0x82, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x8b, 0xd1,
	0x85, 0x20, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0,
	0xba, 0x20, 0xd1, 0x81, 0xd0, 0xb0, 0xd0, 0xbc, 0xd1, 0x8b, 0xd0, 0xbc, 0x20, 0xd0, 0xbd, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd1, 0x8b, 0xd0, 0xbc, 0x2e, 0x20, 0xd0, 0xa4, 0xd0, 0xbe, 0xd1, 0x80, 0xd0,
	0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8b, 0x20, 0xe2,
	0x80, 0x94, 0x20, 0x52, 0x46, 0x43, 0x33, 0x33, 0x33, 0x39, 0x2e, 0x4a, 0x3b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x34, 0x0a, 0x32, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88,
	0xd0, 0xbd, 0xd0, 0xb0, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd0, 0xb1, 0xd1, 0x80, 0xd0, 0xb0, 0xd0,
	0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf,
	0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0x4a, 0x30, 0x0a, 0x03, 0x32, 0x30, 0x34, 0x12,
	0x29, 0x0a, 0x27, 0xd0, 0xbd, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd,
	0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbe,
	0xd1, 0x82, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x82, 0xd0, 0xb0, 0x4a, 0x3d, 0x0a, 0x03, 0x34, 0x30,
	0x31, 0x12, 0x36, 0x0a, 0x34, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xb7, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0x20, 0xd0, 0xbd,
	0xd0, 0xb5, 0x20, 0xd0, 0xb0, 0xd0, 0xb2, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xb8, 0xd0,
	0xb7, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0x4a, 0x39, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x32, 0x0a, 0x30, 0xd0, 0xb2, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5,
	0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8f, 0xd1, 0x8f, 0x20, 0xd0, 0xbe, 0xd1, 0x88, 0xd0, 0xb8, 0xd0,
	0xb1, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd1, 0x81, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb5,
	0xd1, 0x80, 0xd0, 0xb0, 0x42, 0x8d, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x92, 0x41, 0x5b, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30,
	0x2a, 0x01, 0x02, 0x72, 0x4f, 0x0a, 0x1f, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x74, 0x20, 0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xb3, 0xd0, 0xb0, 0xd0, 0xb7, 0xd0, 0xb8, 0xd0, 0xbd,
	0xd1, 0x87, 0xd0, 0xb8, 0xd0, 0xba, 0x12, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65,
	0x72, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_market_proto_rawDescOnce sync.Once
	file_v1_market_proto_rawDescData = file_v1_market_proto_rawDesc
)

func file_v1_market_proto_rawDescGZIP() []byte {
	file_v1_market_proto_rawDescOnce.Do(func() {
		file_v1_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_market_proto_rawDescData)
	})
	return file_v1_market_proto_rawDescData
}

var file_v1_market_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_v1_market_proto_goTypes = []interface{}{
	(*AuthRequest)(nil),   // 0: gopher.market.v1.AuthRequest
	(*OrderRequest)(nil),  // 1: gopher.market.v1.OrderRequest
	(*OrdersRequest)(nil), // 2: gopher.market.v1.OrdersRequest
	(*Order)(nil),         // 3: gopher.market.v1.Order
	(*Empty)(nil),         // 4: gopher.market.v1.Empty
}
var file_v1_market_proto_depIdxs = []int32{
	3, // 0: gopher.market.v1.OrdersRequest.Orders:type_name -> gopher.market.v1.Order
	0, // 1: gopher.market.v1.GopherMarket.UsersRegister:input_type -> gopher.market.v1.AuthRequest
	0, // 2: gopher.market.v1.GopherMarket.UsersLogin:input_type -> gopher.market.v1.AuthRequest
	1, // 3: gopher.market.v1.GopherMarket.OrdersAdd:input_type -> gopher.market.v1.OrderRequest
	2, // 4: gopher.market.v1.GopherMarket.OrdersGet:input_type -> gopher.market.v1.OrdersRequest
	4, // 5: gopher.market.v1.GopherMarket.UsersRegister:output_type -> gopher.market.v1.Empty
	4, // 6: gopher.market.v1.GopherMarket.UsersLogin:output_type -> gopher.market.v1.Empty
	4, // 7: gopher.market.v1.GopherMarket.OrdersAdd:output_type -> gopher.market.v1.Empty
	4, // 8: gopher.market.v1.GopherMarket.OrdersGet:output_type -> gopher.market.v1.Empty
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_v1_market_proto_init() }
func file_v1_market_proto_init() {
	if File_v1_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_market_proto_goTypes,
		DependencyIndexes: file_v1_market_proto_depIdxs,
		MessageInfos:      file_v1_market_proto_msgTypes,
	}.Build()
	File_v1_market_proto = out.File
	file_v1_market_proto_rawDesc = nil
	file_v1_market_proto_goTypes = nil
	file_v1_market_proto_depIdxs = nil
}
